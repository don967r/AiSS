import streamlit as st
import pandas as pd
import geopandas as gpd
import folium
from folium.plugins import HeatMap
from streamlit_folium import st_folium
from datetime import timedelta, datetime
import plotly.express as px # –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

# --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ó–∞–≥–æ–ª–æ–≤–æ–∫ ---
st.set_page_config(layout="wide", page_title="–ê–Ω–∞–ª–∏–∑ '–°—É–¥–Ω–æ-–ü—è—Ç–Ω–æ'")

# –î–æ–±–∞–≤–ª–µ–Ω—ã —Å—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
st.markdown("""
<style>
/* --- –°–¢–ò–õ–ò –î–õ–Ø –¢–ï–ú–ù–û–ô –¢–ï–ú–´ --- */
body {
    color: #fff;
    background-color: #111;
}
.stApp {
    background-color: #0E1117;
}
h1, h2, h3, h4, h5, h6 {
    color: #ffffff !important;
}
p, .stMarkdown, .stWrite, div[data-testid="stText"], .stDataFrame {
    color: #fafafa !important;
}
[data-testid="stSidebar"] {
    background-color: #1c1c1e !important;
}
[data-testid="stSidebar"] h1, [data-testid="stSidebar"] h2, [data-testid="stSidebar"] h3, [data-testid="stSidebar"] label {
     color: #ffffff !important;
}
label[data-testid="stWidgetLabel"] p {
    color: #fafafa !important;
}
/* --- –ö–û–ù–ï–¶ –°–¢–ò–õ–ï–ô –î–õ–Ø –¢–ï–ú–ù–û–ô –¢–ï–ú–´ --- */

/* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ */
div[data-testid="stVerticalBlock"] > div {
    margin-top: 0.5rem !important;
    padding-top: 0 !important;
    margin-bottom: 0.5rem !important;
    padding-bottom: 0 !important;
}
div[data-testid="stFolium"] {
    margin-bottom: 0.5rem !important;
}
h2 {
    margin-top: 0.5rem !important;
    margin-bottom: 0.5rem !important;
}
</style>
""", unsafe_allow_html=True)

st.title("üö¢ –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∏ '–°—É–¥–Ω–æ-–ü—è—Ç–Ω–æ' üíß")
st.write("""
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞–∑–ª–∏–≤–∞—Ö –∏ —Ç—Ä–µ–∫–∏ —Å—É–¥–æ–≤ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.
–û–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å—É–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ –∑–æ–Ω–µ —Ä–∞–∑–ª–∏–≤–∞ –Ω–µ–∑–∞–¥–æ–ª–≥–æ –¥–æ –µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è,
–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º.
""")

# --- –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º ---
SPILLS_FILE_PATH = 'fields2.geojson'
AIS_FILE_PATH = 'generated_ais_data.csv'

# --- 2. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

time_window_hours = st.sidebar.slider(
    "–í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–∏—Å–∫–∞ (—á–∞—Å—ã –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è):",
    min_value=1, max_value=168, value=24, step=1,
    help="–ò—Å–∫–∞—Ç—å —Å—É–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –≤ –∑–æ–Ω–µ —Ä–∞–∑–ª–∏–≤–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –î–û –µ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è."
)

date_range = st.sidebar.date_input(
    "–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
    value=(datetime(2023, 1, 1), datetime(2025, 6, 15)),
    min_value=datetime(2000, 1, 1),
    max_value=datetime.now(),
    help="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏–≤–æ–≤ –∏ AIS-–¥–∞–Ω–Ω—ã—Ö."
)

# --- 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_spills_data(file_path):
    try:
        gdf = gpd.read_file(file_path)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å GeoJSON —Ñ–∞–π–ª '{file_path}'. –û—à–∏–±–∫–∞: {e}")
        return None
    required_cols = ['slick_name', 'area_sys']
    if not all(col in gdf.columns for col in required_cols):
        missing = [col for col in required_cols if col not in gdf.columns]
        st.error(f"–í GeoJSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing)}")
        return None
    gdf.rename(columns={'slick_name': 'spill_id', 'area_sys': 'area_sq_km'}, inplace=True)
    if 'date' in gdf.columns and 'time' in gdf.columns:
        gdf['detection_date'] = pd.to_datetime(gdf['date'] + ' ' + gdf['time'], errors='coerce')
    else:
        gdf['detection_date'] = pd.to_datetime(gdf['spill_id'], format='%Y-%m-%d_%H:%M:%S', errors='coerce')
    gdf.dropna(subset=['detection_date'], inplace=True)
    if gdf.empty: return None
    if gdf.crs is None: gdf.set_crs("EPSG:4326", inplace=True)
    else: gdf = gdf.to_crs("EPSG:4326")
    return gdf

@st.cache_data
def load_ais_data(file_path):
    try:
        df = pd.read_csv(file_path, low_memory=False)
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å CSV —Ñ–∞–π–ª '{file_path}'. –û—à–∏–±–∫–∞: {e}")
        return None
    required_cols = ['mmsi', 'latitude', 'longitude', 'BaseDateTime']
    if not all(col in df.columns for col in required_cols):
        missing = [col for col in required_cols if col not in df.columns]
        st.error(f"–í CSV —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {', '.join(missing)}")
        return None
    df['timestamp'] = pd.to_datetime(df['BaseDateTime'], errors='coerce')
    df.dropna(subset=['timestamp', 'latitude', 'longitude'], inplace=True)
    gdf = gpd.GeoDataFrame(df, geometry=gpd.points_from_xy(df.longitude, df.latitude), crs="EPSG:4326")
    return gdf

def find_candidates(spills_gdf, vessels_gdf, time_window_hours):
    if spills_gdf is None or vessels_gdf is None: return gpd.GeoDataFrame()
    candidates = gpd.sjoin(vessels_gdf, spills_gdf, predicate='within')
    if candidates.empty: return gpd.GeoDataFrame()
    time_delta = timedelta(hours=time_window_hours)
    candidates = candidates[
        (candidates['timestamp'] <= candidates['detection_date']) &
        (candidates['timestamp'] >= candidates['detection_date'] - time_delta)
    ]
    return candidates

# --- 4. –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
spills_gdf = load_spills_data(SPILLS_FILE_PATH)
vessels_gdf = load_ais_data(AIS_FILE_PATH)

if spills_gdf is None or vessels_gdf is None or spills_gdf.empty or vessels_gdf.empty:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö. –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    st.stop()

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
if len(date_range) == 2:
    start_date, end_date = pd.to_datetime(date_range[0]), pd.to_datetime(date_range[1]) + pd.Timedelta(days=1)
    spills_gdf = spills_gdf[(spills_gdf['detection_date'] >= start_date) & (spills_gdf['detection_date'] <= end_date)]
    vessels_gdf = vessels_gdf[(vessels_gdf['timestamp'] >= start_date) & (vessels_gdf['timestamp'] <= end_date)]

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—É–¥–∞–º
vessel_options = vessels_gdf[['mmsi']].drop_duplicates()
if 'vessel_name' in vessels_gdf.columns:
    vessel_options = vessels_gdf[['mmsi', 'vessel_name']].drop_duplicates()
    vessel_options['display'] = vessel_options.apply(lambda x: f"{x['vessel_name']} (MMSI: {x['mmsi']})" if pd.notnull(x['vessel_name']) else f"MMSI: {x['mmsi']}", axis=1)
else:
    vessel_options['display'] = vessel_options['mmsi'].apply(lambda x: f"MMSI: {x}")

selected_vessels = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–¥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", options=vessel_options['display'].tolist(), default=None)

if selected_vessels:
    selected_mmsi = vessel_options[vessel_options['display'].isin(selected_vessels)]['mmsi'].tolist()
    vessels_gdf = vessels_gdf[vessels_gdf['mmsi'].isin(selected_mmsi)]

# --- 5. –ö–∞—Ä—Ç–∞ –∏ —Ç–∞–±–ª–∏—Ü–∞ ---
with st.container():
    st.header("–ö–∞—Ä—Ç–∞ —Ä–∞–∑–ª–∏–≤–æ–≤ –∏ —Å—É–¥–æ–≤-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    if spills_gdf.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞–∑–ª–∏–≤–∞—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç.")
    else:
        map_center = [spills_gdf.unary_union.centroid.y, spills_gdf.unary_union.centroid.x]
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω —Å–ª–æ–∂–Ω—ã–π JS-–±–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ü–∏—è
        m = folium.Map(location=map_center, zoom_start=8, tiles="CartoDB dark_matter")

        spills_fg = folium.FeatureGroup(name="–ü—è—Ç–Ω–∞ —Ä–∞–∑–ª–∏–≤–æ–≤").add_to(m)
        for _, row in spills_gdf.iterrows():
            folium.GeoJson(
                row['geometry'],
                style_function=lambda x: {'fillColor': '#FF4500', 'color': '#FFFFFF', 'weight': 1.5, 'fillOpacity': 0.6},
                tooltip=f"<b>–ü—è—Ç–Ω–æ:</b> {row.get('spill_id', 'N/A')}<br><b>–í—Ä–µ–º—è:</b> {row['detection_date'].strftime('%Y-%m-%d %H:%M')}<br><b>–ü–ª–æ—â–∞–¥—å:</b> {row.get('area_sq_km', 0):.2f} –∫–º¬≤"
            ).add_to(spills_fg)

        candidates_df = find_candidates(spills_gdf, vessels_gdf, time_window_hours)

        if not candidates_df.empty:
            candidate_vessels_fg = folium.FeatureGroup(name="–°—É–¥–∞-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã").add_to(m)
            for _, row in candidates_df.iterrows():
                vessel_name = row.get('vessel_name', '–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ')
                folium.Marker(
                    location=[row.geometry.y, row.geometry.x],
                    tooltip=f"<b>–°—É–¥–Ω–æ:</b> {vessel_name} (MMSI: {row['mmsi']})<br><b>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–¥–∞:</b> {row['timestamp'].strftime('%Y-%m-%d %H:%M')}<br><b>–í–Ω—É—Ç—Ä–∏ –ø—è—Ç–Ω–∞:</b> {row['spill_id']}",
                    icon=folium.Icon(color='blue', icon='ship', prefix='fa')
                ).add_to(candidate_vessels_fg)

        folium.LayerControl().add_to(m)
        st_folium(m, width=1200, height=400)

    st.header(f"–¢–∞–±–ª–∏—Ü–∞ —Å—É–¥–æ–≤-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–Ω–∞–π–¥–µ–Ω–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö {time_window_hours} —á–∞—Å–æ–≤)")
    if candidates_df.empty:
        st.info("–í –∑–∞–¥–∞–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ —Å—É–¥–∞-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    else:
        report_df = candidates_df.drop_duplicates(subset=['spill_id', 'mmsi'])
        desired_cols = ['spill_id', 'mmsi', 'vessel_name', 'timestamp', 'detection_date', 'area_sq_km']
        display_df = report_df[[col for col in desired_cols if col in report_df.columns]].copy()
        display_df.rename(columns={'spill_id': 'ID –ü—è—Ç–Ω–∞', 'mmsi': 'MMSI –°—É–¥–Ω–∞', 'vessel_name': '–ù–∞–∑–≤–∞–Ω–∏–µ —Å—É–¥–Ω–∞', 'timestamp': '–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–¥–∞ —Å—É–¥–Ω–∞', 'detection_date': '–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—è—Ç–Ω–∞', 'area_sq_km': '–ü–ª–æ—â–∞–¥—å –ø—è—Ç–Ω–∞, –∫–º¬≤'}, inplace=True)
        st.dataframe(display_df.sort_values(by='–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—è—Ç–Ω–∞', ascending=False).reset_index(drop=True))

# --- 6. –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ ---
st.header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
tab1, tab2, tab3 = st.tabs(["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Å—É–¥–∞–º", "üìç –ì–æ—Ä—è—á–∏–µ —Ç–æ—á–∫–∏ (Hotspots)", "üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞–º"])

if not candidates_df.empty:
    unique_incidents = candidates_df.drop_duplicates(subset=['mmsi', 'spill_id'])
    ship_names = unique_incidents[['mmsi', 'vessel_name']].drop_duplicates() if 'vessel_name' in unique_incidents.columns else None

    with tab1:
        st.subheader("–ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—è—Ç–µ–Ω")
        ship_incident_counts = unique_incidents.groupby('mmsi').size().reset_index(name='incident_count').sort_values('incident_count', ascending=False)
        if ship_names is not None: ship_incident_counts = pd.merge(ship_incident_counts, ship_names, on='mmsi', how='left')
        st.dataframe(ship_incident_counts.reset_index(drop=True))
        
        st.subheader("–ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —Å—É–º–º–∞—Ä–Ω–æ–π –ø–ª–æ—â–∞–¥–∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—è—Ç–µ–Ω (–∫–º¬≤)")
        ship_area_sum = unique_incidents.groupby('mmsi')['area_sq_km'].sum().reset_index(name='total_area_sq_km').sort_values('total_area_sq_km', ascending=False)
        if ship_names is not None: ship_area_sum = pd.merge(ship_area_sum, ship_names, on='mmsi', how='left')
        st.dataframe(ship_area_sum.reset_index(drop=True))

    with tab3:
        st.subheader("–ü—è—Ç–Ω–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å—É–¥–æ–≤-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        spill_candidate_counts = candidates_df.groupby('spill_id')['mmsi'].nunique().reset_index(name='candidate_count').sort_values('candidate_count', ascending=False)
        st.dataframe(spill_candidate_counts.reset_index(drop=True))

        st.subheader("–ì–ª–∞–≤–Ω—ã–µ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è)")
        candidates_df['time_to_detection'] = candidates_df['detection_date'] - candidates_df['timestamp']
        prime_suspects_df = candidates_df.loc[candidates_df.groupby('spill_id')['time_to_detection'].idxmin()]
        display_cols = ['spill_id', 'mmsi', 'vessel_name', 'time_to_detection', 'area_sq_km']
        st.dataframe(prime_suspects_df[[col for col in display_cols if col in prime_suspects_df.columns]].sort_values('area_sq_km', ascending=False))

        if 'VesselType' in unique_incidents.columns:
            with st.expander("üö¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å—É–¥–æ–≤"):
                vessel_type_analysis = unique_incidents.groupby('VesselType').agg(incident_count=('spill_id', 'count'), total_area_sq_km=('area_sq_km', 'sum')).sort_values('incident_count', ascending=False).reset_index()
                st.dataframe(vessel_type_analysis)
                
                fig = px.pie(vessel_type_analysis, names='VesselType', values='incident_count', title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å—É–¥–æ–≤', labels={'VesselType':'–¢–∏–ø —Å—É–¥–Ω–∞', 'incident_count':'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤'})
                fig.update_layout({'plot_bgcolor': 'rgba(0, 0, 0, 0)', 'paper_bgcolor': 'rgba(0, 0, 0, 0)', 'font': {'color': '#ffffff'}})
                st.plotly_chart(fig)

with tab2:
    st.subheader("–ö–∞—Ä—Ç–∞ '–≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫' —Ä–∞–∑–ª–∏–≤–æ–≤")
    if spills_gdf.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ä—Ç—ã –≥–æ—Ä—è—á–∏—Ö —Ç–æ—á–µ–∫.")
    else:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω —Å–ª–æ–∂–Ω—ã–π JS-–±–ª–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∞—Ç—Ä–∏–±—É—Ü–∏—è
        m_heatmap = folium.Map(location=map_center, zoom_start=8, tiles="CartoDB dark_matter")
        heat_data = [[point.xy[1][0], point.xy[0][0], row['area_sq_km']] for index, row in spills_gdf.iterrows() for point in [row['geometry'].centroid]]
        HeatMap(heat_data, radius=15, blur=20, max_zoom=10).add_to(m_heatmap)
        folium.LayerControl().add_to(m_heatmap)
        st_folium(m_heatmap, width=1200, height=400)
